{
    "halo": {
        "historiTitle": "Context",
        "histori1": "Halo: Ground Command is a tabletop miniatures game set in the Halo universe. Unlike other, more popular wargames such as Warhammer 40k or Star Wars: Legion, its community keeps the experience alive through fan-made rules and manually created army sheets. The process of building an army was slow, error-prone, and completely offline.",
        "histori2": "This project was born as an exercise in product design and development, aiming to provide a modern, visual, and functional tool for building army lists. Inspired by the Army Forge system from OnePageRules, the project evolved into a modular platform that serves as a foundation for multiple wargames.",
        
        "objetiveTitle":"Objective",
        "objetiveSubTitle": "Design and develop a web application that:",
        "objetive1":"Allows players to create custom armies quickly and intuitively.",
        "objetive2":"Automatically calculates points, restrictions, and special rules.",
        "objetive3":"Generates a clean PDF export, ready to print or share.",
        "objetive4":"Is modular and extensible, so it can be adapted to other games in the future.",

        "problemTitle": "Identified Problem",
        "problemSubTitle": "Players used spreadsheets, PDFs, or improvised notes to build their armies. This resulted in:",
        "problem1":"Frequent errors in point calculation and rule application.",
        "problem2":"Wasted time checking unit compatibilities.",
        "problem3":"Inconsistent experiences between players.",
        "problem4":"A lack of a visual interface that matched the Halo universe.",

        "sectionProcessTitle":"Process",
        "processTitle":"1 - Research",
        "processSubTitle": "Several tools were analyzed, such as:",
        "process1":"Battlescribe (Warhammer 40k)",
        "process2":"Army Forge (OnePageRules)",
        "process3":"Tabletop Admiral (Star Wars: Legion)",
        "processSubTitle2": "From there, three key design principles emerged:",
        "process4":"Speed over complexity. The user should be able to build a list in minutes.",
        "process5":"Visual clarity. Avoid the visual noise typical of older army builders.",
        "process6":"Total control. The player decides everything, without restrictive validations that break the flow.",

        "definitionTitle":"2 - Data Structure",
        "definition1":"The first challenge was converting the rulebook into a format readable by the app. Starting from the original PDF (similar to OPR Army Forge), each unit, ability, and attribute was manually extracted and normalized into JSON:",
        "definition2":"This laid the foundation for a scalable and reusable system, capable of loading any rulebook following the same structure.",
        
        "designTitle":"3 - UX / UI Design",
        "designSubTitle": "The visual approach prioritized readability and information rhythm:",
        "design1":"Neutral colors and compact typography to evoke tactical unit cards.",
        "design2":"Reusable components for each unit type (Infantry, Vehicle, Elite, etc).",
        "design3":"A dashboard-style layout where users can build, preview, and export without changing screens.",
        "designSubTitle2": "Main components:",
        "design4":"UnitCard: displays basic information and options.",
        "design5":"ArmyPanel: calculates total points and validates compatibilities.",
        "design6":"ExportSection: generates the final PDF.",
        
        "devTitle":"4 - Development",
        "devSubTitle": "Tech stack:",
        "dev1":"Frontend: React + TailwindCSS + Vite",
        "dev2":"State management: Hooks + Context API",
        "dev3":"PDF Export: pdfmake (configured to preserve OPR typography and structure)",
        "dev4":"Data: Local JSON files (MongoDB Atlas planned)",
        "devSubTitle2": "During development, several key decisions were made:",
        "dev5":"Change in export strategy:",
        "dev51":" Initially, jsPDF was used, but its handling of tables and styles was limited. It was replaced with pdfmake to achieve a more consistent layout.",
        "dev6":"Removal of unnecessary dependencies:",
        "dev61":"The goal was to keep the project lightweight (<1MB compressed).",
        "dev7":"Modular design:",
        "dev71":"Data logic (units, rules, stats) was separated from rendering, allowing new factions or games to be added easily.",

        "performanceTitle":"5 - Complexity",
        "performance1":"What started as a technical project turned into a lesson in system design. At first, HGC seemed simple: an app to build army lists from JSON data. But as the project evolved, I realized I was dealing with something deeper—the logic behind each unit, their exceptions, special rules, and how all these variables could coexist within a coherent structure without breaking the user experience.",
        "performance2":"The project’s complexity forced me to constantly rethink decisions; many solutions that seemed correct at first became obstacles as the real flow of use emerged.",
        "performance3":"One of the biggest challenges was balancing technical precision and visual fluidity. Designing a tactical tool without making it feel heavy was almost like building a miniature operating system. Every change in the interface had to follow internal logic, while still conveying the sense of control and clarity that defines a good strategy game.",
        "performance4":"PDF export became another turning point: the format needed to maintain visual hierarchy, readability, and adaptability to different army sizes, which ultimately required building a custom layout system within pdfmake.",
        
        "resultsTitle":"6 - Results",
        "results1":"In the end, the project not only achieved its functional goal —allowing users to create, modify, and export armies seamlessly— but also evolved into a full exercise in product design. HGC allowed me to explore the relationship between data, structure, and narrative, and to understand how a tool can express identity even without relying on the traditional Halo aesthetic.",
        "results2":"More than an army builder, it became a platform to explore how strategy can become tangible through design.",

        "lessonTitle":"Lessons Learned",
        "lesson1":"Resource limitations drive creativity: digital collage and typography became key expressive tools.",
        "lesson2":"Involving the community early helps prevent major design or usability issues.",
        "lesson3":"Documenting not just the outcome but also the process, failures, and insights gives more depth to a case study.",

        "testingTitle":"7 - Testing",
        "testing1":"The project is currently in its testing phase, fine-tuning performance, list validation, and visual consistency in exports. This stage has been essential for observing how different users interpret the interface and how small improvements in flow can make the difference between a functional tool and an intuitive experience.",
        
        "nextTitle":"8 - Next Steps",
        "next1":"Looking ahead, I plan to expand the project into a more open system. I aim to integrate a cloud database to store user lists, add visual deployment modes, and allow custom unit or weapon editing from within the interface.",
        "next2":"At its core, HGC is more than a technical project: it’s a reflection on how design can translate complexity into order, and how a well-structured experience can make even war —in its playful form— feel understandable, intuitive, and alive.",

        "footerText":"This project reminded me that good product design is not just about aesthetics or functionality, but about translating a complex system into a comprehensible experience. In this case, the product had to respect the rules of a tactical game while offering a fluid and modern interface."
    }
}